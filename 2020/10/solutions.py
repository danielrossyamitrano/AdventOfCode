from math import pow

# from os import getcwd, path
# with open(path.join(getcwd(), '10', 'input.txt'), 'rt') as file:
#     sample = [int(line.rstrip('\n')) for line in file.readlines()]


sample = [16, 10, 15, 5, 1, 11, 7, 19, 6, 12, 4]
# sample = [28, 33, 18, 42, 31, 14, 46, 20, 48, 47, 24, 23, 49, 45, 19, 38, 39, 11, 1, 32,
#           25, 35, 8, 17, 7, 9, 4, 2, 34, 10, 3]

# Part 1
sample.sort()
differences = []
jolt = 0
for adapter in sample:
    differences.append(abs(adapter - jolt))
    jolt = adapter
else:
    sample.append(jolt + 3)
    differences.append(abs(sample[-1] - jolt))

print(differences.count(1) * differences.count(3))

# Part 2
del sample[-1]  # because the last "adapter" is not really an adatper, but the device's built-in adapter.
ways = 0  # number of ways
jolt = 0  # current jolt
power = 0  # power of two
while jolt + 3 < sample[-1] + 3:
    possible = [i for i in sample if 0 < (i - jolt) <= 3]
    # here I get the number of possible choices given the range 1-3 jolt difference
    if len(possible) > 1:
        #  the logic here it that, if I choose the third option, I'm skipping the first and second options,
        #  given that I could have chosen those options, the number of ways generated by this choice is
        #  the power of 2 (chosen, not chosen: two options) by the current "position" of the branching options
        #  (the first branch has a power of 0, the second 1, and so on).
        power += len(possible) - 1
        ways = int(pow(2, power))

    jolt = max(possible)

print(ways)
